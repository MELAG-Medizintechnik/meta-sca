## This class does check for cve in a recipe
## it does use the original cve-check implementation from poky
## but formats it to a different output

inherit cve-check
inherit sca-helper
inherit sca-global
inherit sca-conv-checkstyle-helper

def sca_create_data_file(d, patched, unpatched, cve_data):
    from xml.etree.ElementTree import Element, SubElement, Comment, tostring
    from xml.etree import ElementTree
    from xml.dom import minidom
    """
    Write CVE information in WORKDIR; and to CVE_CHECK_DIR, and
    CVE manifest if enabled.
    """

    cve_file = d.getVar("CVE_CHECK_LOG")
    nvd_link = "https://web.nvd.nist.gov/view/vuln/detail?vulnId="
    write_string = ""
    unpatched_cves = []
    bb.utils.mkdirhier(os.path.dirname(cve_file))

    class CVEItem():
        File = ""
        Line = "1"
        Column = "1"
        Severity = "error"
        Message = ""
        ID = ""

    items = []

    for cve in sorted(cve_data):
        if cve in patched:
            continue
        g = CVEItem()
        g.File = d.getVar("FILE")
        g.Message = "[Package:%s Tool:cve-check] %s" % (d.getVar("PN"), 
            "{},Score={},Url={}".format(cve_data[cve]["summary"], cve_data[cve]["score"], nvd_link, cve))
        g.ID = "cve-check.cve-check.unpatched"
        if g.Severity in checkstyle_allowed_warning_level(d):
            items.append(g)

    filenames = list(set([x.File for x in items]))

    top = Element("checkstyle")
    top.set("version", "4.3")

    for _file in filenames:
        _fe = SubElement(top, "file", { "name": _file })
        for _fileE in [x for x in items if x.File == _file ]:
            _fee = SubElement(_fe, "error", {
                "column": _fileE.Column,
                "line": _fileE.Line,
                "message": _fileE.Message,
                "severity": _fileE.Severity,
                "source": _fileE.ID
            })
    try:
        return checkstyle_prettify(d, top).decode("utf-8")
    except:
        return checkstyle_prettify(d, top)

python do_cve_check () {
    """
    Check recipe for patched and unpatched CVEs
    """

    if os.path.exists(d.getVar("CVE_CHECK_TMP_FILE")):
        patched_cves = get_patches_cves(d)
        patched, unpatched = check_cves(d, patched_cves)
        if patched or unpatched:
            cve_data = get_cve_info(d, patched + unpatched)

            output = sca_create_data_file(d, patched, unpatched, cve_data)
        else:
            output = sca_create_data_file(d, [], [], [])
    else:
        output = sca_create_data_file(d, [], [], [])
        bb.note("Failed to update CVE database, skipping CVE check")

    result_raw_file = os.path.join(d.getVar("T"), "sca_raw_cve-check.xml")
    d.setVar("SCA_RAW_RESULT", result_raw_file)
    with open(result_raw_file, "w") as o:
        o.write(output)
    result_file = os.path.join(d.getVar("T"), "sca_checkstyle_cve-check.xml")
    d.setVar("SCA_RESULT_FILE", result_file)
    with open(result_file, "w") as o:
        o.write(output)

    ## Evaluate
    _warnings = get_warnings_from_result(d)
    _fatals = [] ## currently no support for fatals - get_fatal_from_result(d, "cve-check.", _fatal)
    _errors = get_errors_from_result(d)

    warn_log = []
    if any(_warnings) and should_emit_to_console(d):
        warn_log.append("{} warning(s)".format(len(_warnings)))
    if any(_errors) and should_emit_to_console(d):
        warn_log.append("{} error(s)".format(len(_errors)))
    if warn_log and should_emit_to_console(d):
        bb.warn("SCA has found {}".format(",".join(warn_log)))
    
    if any(_fatals):
        bb.build.exec_func("do_sca_deploy_cvecheck", d)
        bb.error("SCA has following fatal errors: {}".format("\n".join(_fatals))) 
}

python do_sca_deploy_cvecheck() {
    import os
    import shutil
    os.makedirs(os.path.join(d.getVar("SCA_EXPORT_DIR"), "cve-check", "raw"), exist_ok=True)
    os.makedirs(os.path.join(d.getVar("SCA_EXPORT_DIR"), "cve-check", "checkstyle"), exist_ok=True)
    raw_target = os.path.join(d.getVar("SCA_EXPORT_DIR"), "cve-check", "raw", "{}-{}.txt".format(d.getVar("PN"), d.getVar("PV")))
    cs_target = os.path.join(d.getVar("SCA_EXPORT_DIR"), "cve-check", "checkstyle", "{}-{}.xml".format(d.getVar("PN"), d.getVar("PV")))
    src_raw = os.path.join(d.getVar("T"), "sca_raw_cve-check.xml")
    src_conv = os.path.join(d.getVar("T"), "sca_checkstyle_cve-check.xml")
    if os.path.exists(src_raw):
        shutil.copy(src_raw, raw_target)
    if os.path.exists(src_conv):
        shutil.copy(src_conv, cs_target)
    if os.path.exists(cs_target):
        do_sca_export_sources(d, cs_target)
}

addtask do_sca_deploy_cvecheck after do_cve_check before do_package