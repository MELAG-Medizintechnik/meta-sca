#! /usr/bin/env python3
## SPDX-License-Identifier: BSD-2-Clause
## Copyright (c) 2019, Konrad Weihmann

## This class get the average execution time of a task from buildstats

import argparse
import glob
import os
import re
import subprocess
import sys
from statistics import mean

_dict = []

def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--threshold", type=float, default=2.0, help="Minimum threshold for this task")
    parser.add_argument('taskname', help="task to look for")
    x = parser.parse_args()
    return x

def get_package_info(args, taskname, threshold=2.0):
    global _dict
    _time = []
    for f in glob.glob("*/buildstats/*/*/{}".format(taskname)):
        with open(f) as i:
            for l in i.readlines():
                if l.find("Elapsed time:") != -1:
                    _tmp = l.strip("\n").strip().replace("Elapsed time:", "").replace("seconds", "").strip()
                    _time.append(float(_tmp))
                    break
    if any(_time):
        _dict.append(mean(_time))

args = create_parser()
get_package_info(args, args.taskname, threshold=args.threshold)
if not _dict:
    sys.stderr.write("{} haven't been executed at all\n".format(args.taskname))
else:
    _build_time = mean(_dict)
    _clean_build_time = mean([x for x in _dict if x >= args.threshold] or [0.0])
    print("{}:{:.2f}:{:.2f}".format(args.taskname, _build_time, _clean_build_time))